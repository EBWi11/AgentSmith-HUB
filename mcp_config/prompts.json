{
  "version": "2024-07-05",
  "prompts": [
    {
      "name": "rule_syntax_complete_guide",
      "description": "Complete comprehensive guide for AgentSmith-HUB rule engine - detailed examples and syntax for LLM learning",
      "template": "AGENTSMITH-HUB RULE ENGINE COMPLETE SYNTAX GUIDE\n\n=== CORE CONCEPTS ===\n\n1. FLEXIBLE EXECUTION ORDER\n   - Operations execute in the order they appear in XML\n   - This allows data enrichment before checks, performance optimization, and conditional processing\n   - Example: Add timestamp first, then check based on that timestamp\n\n2. RULE STRUCTURE\n   ```xml\n   <root type=\"DETECTION|WHITELIST\" name=\"ruleset_name\" author=\"author\">\n     <rule id=\"unique_id\" name=\"Rule Description\">\n       <!-- Operations in execution order -->\n       <check type=\"EQU\" field=\"field_name\">value</check>\n       <threshold group_by=\"field\" range=\"5m\" value=\"10\"/>\n       <append field=\"new_field\">value</append>\n     </rule>\n   </root>\n   ```\n\n=== CHECK OPERATIONS ===\n\n**String Matching (Case Sensitive)**\n- EQU: Exact match - `<check type=\"EQU\" field=\"status\">active</check>`\n- NEQ: Not equal - `<check type=\"NEQ\" field=\"status\">inactive</check>`\n- INCL: Contains - `<check type=\"INCL\" field=\"message\">error</check>`\n- NI: Not contains - `<check type=\"NI\" field=\"message\">success</check>`\n- START: Starts with - `<check type=\"START\" field=\"path\">/admin</check>`\n- END: Ends with - `<check type=\"END\" field=\"file\">.exe</check>`\n- NSTART: Not starts with - `<check type=\"NSTART\" field=\"path\">/public</check>`\n- NEND: Not ends with - `<check type=\"NEND\" field=\"file\">.txt</check>`\n\n**Case Insensitive Matching**\n- NCS_EQU: Case insensitive equal - `<check type=\"NCS_EQU\" field=\"protocol\">HTTP</check>`\n- NCS_NEQ: Case insensitive not equal - `<check type=\"NCS_NEQ\" field=\"method\">get</check>`\n- NCS_INCL: Case insensitive contains - `<check type=\"NCS_INCL\" field=\"header\">content-type</check>`\n- NCS_NI: Case insensitive not contains - `<check type=\"NCS_NI\" field=\"useragent\">bot</check>`\n- NCS_START: Case insensitive starts - `<check type=\"NCS_START\" field=\"domain\">www.</check>`\n- NCS_END: Case insensitive ends - `<check type=\"NCS_END\" field=\"email\">.com</check>`\n- NCS_NSTART: Case insensitive not starts - `<check type=\"NCS_NSTART\" field=\"url\">http://</check>`\n- NCS_NEND: Case insensitive not ends - `<check type=\"NCS_NEND\" field=\"filename\">.exe</check>`\n\n**Numeric Comparison**\n- MT: Greater than - `<check type=\"MT\" field=\"score\">80</check>`\n- LT: Less than - `<check type=\"LT\" field=\"age\">18</check>`\n\n**Null Checks**\n- ISNULL: Field is null - `<check type=\"ISNULL\" field=\"optional\"></check>`\n- NOTNULL: Field not null - `<check type=\"NOTNULL\" field=\"required\"></check>`\n\n**Advanced Checks**\n- REGEX: Regular expression - `<check type=\"REGEX\" field=\"ip\">^\\\\d+\\\\.\\\\d+\\\\.\\\\d+\\\\.\\\\d+$</check>`\n- PLUGIN: Plugin function - `<check type=\"PLUGIN\">isPrivateIP(_$source_ip)</check>`\n\n**Multi-value Matching**\n```xml\n<check type=\"INCL\" field=\"filename\" logic=\"OR\" delimiter=\"|\">\n  .exe|.dll|.scr|.bat\n</check>\n<check type=\"EQU\" field=\"status\" logic=\"AND\" delimiter=\",\">\n  active,verified,approved\n</check>\n```\n\n**Plugin Negation**\n```xml\n<check type=\"PLUGIN\">!isPrivateIP(_$dest_ip)</check>\n```\n\n=== THRESHOLD OPERATIONS ===\n\n**Basic Threshold**\n```xml\n<threshold group_by=\"source_ip\" range=\"5m\" value=\"10\"/>\n```\n\n**SUM Mode - Aggregate Values**\n```xml\n<threshold group_by=\"user_id\" range=\"1h\" count_type=\"SUM\" count_field=\"amount\" value=\"1000\"/>\n```\n\n**CLASSIFY Mode - Count Unique Values**\n```xml\n<threshold group_by=\"user_id\" range=\"30m\" count_type=\"CLASSIFY\" count_field=\"accessed_file\" value=\"25\"/>\n```\n\n**Performance Optimization**\n```xml\n<threshold group_by=\"user_id\" range=\"5m\" value=\"10\" local_cache=\"true\"/>\n```\n\n**Time Ranges**: s (seconds), m (minutes), h (hours), d (days)\n**Grouping**: Single field or comma-separated multiple fields\n\n=== DATA PROCESSING ===\n\n**APPEND - Add/Modify Fields**\n```xml\n<append field=\"alert_type\">suspicious_activity</append>\n<append field=\"message\">User _$username from _$source_ip</append>\n<append type=\"PLUGIN\" field=\"timestamp\">now()</append>\n```\n\n**DEL - Remove Fields**\n```xml\n<del>password</del>\n<del>password,secret_key,auth_token</del>\n```\n\n**PLUGIN - Execute Actions**\n```xml\n<plugin>sendAlert(_$ORIDATA)</plugin>\n<plugin>blockIP(_$source_ip, 3600)</plugin>\n```\n\n=== COMPLEX LOGIC WITH CHECKLIST ===\n\n```xml\n<checklist condition=\"(a or b) and not c\">\n  <check id=\"a\" type=\"EQU\" field=\"status\">active</check>\n  <check id=\"b\" type=\"EQU\" field=\"status\">pending</check>\n  <check id=\"c\" type=\"EQU\" field=\"blocked\">true</check>\n</checklist>\n```\n\n**IMPORTANT**: Every checklist MUST contain at least one check node. Empty checklists are not allowed.\n\n**Logical Operators**: and, or, not (lowercase only)\n**Grouping**: Use parentheses for precedence\n\n=== BUILT-IN PLUGINS ===\n\n**Check Plugins (Return bool)**\n- isPrivateIP(ip) - Check if IP is private\n- cidrMatch(ip, cidr) - Check IP in CIDR range\n- geoMatch(ip, country) - Check IP country\n- suppressOnce(key, seconds, ruleid) - Alert suppression\n\n**Data Processing Plugins**\n- now() - Current timestamp\n- ago(seconds) - Past timestamp\n- dayOfWeek() - Day of week (0-6)\n- hourOfDay() - Hour of day (0-23)\n- tsToDate(timestamp) - Convert to RFC3339\n- base64Encode(input) - Base64 encode\n- base64Decode(input) - Base64 decode\n- hashMD5(input) - MD5 hash\n- hashSHA1(input) - SHA1 hash\n- hashSHA256(input) - SHA256 hash\n- extractDomain(url) - Extract domain\n- extractTLD(domain) - Extract TLD\n- extractSubdomain(host) - Extract subdomain\n- replace(input, old, new) - String replace\n- regexExtract(input, pattern) - Regex extract\n- regexReplace(input, pattern, replacement) - Regex replace\n- parseJSON(jsonString) - Parse JSON\n- parseUA(userAgent) - Parse User-Agent\n- virusTotal(hash, apiKey) - VirusTotal lookup\n- shodan(ip, apiKey) - Shodan lookup\n- threatBook(value, type, apiKey) - ThreatBook lookup\n\n=== DYNAMIC REFERENCES ===\n\n- _$field_name - Reference field value\n- _$parent.child - Nested field access\n- _$ORIDATA - Complete data object\n\n**Examples**:\n```xml\n<check type=\"MT\" field=\"amount\">_$user.daily_limit</check>\n<append field=\"summary\">Alert for _$username from _$source_ip</append>\n<plugin>sendAlert(_$ORIDATA)</plugin>\n```\n\n=== PERFORMANCE OPTIMIZATION ===\n\n**Operation Performance Ranking (Fast to Slow)**:\n1. NOTNULL, ISNULL, EQU, NEQ\n2. INCL, NI, START, END\n3. MT, LT\n4. REGEX\n5. PLUGIN\n6. External API plugins\n\n**Optimization Strategies**:\n- Order checks by performance (fast first)\n- Use early filtering with high-selectivity checks\n- Place threshold operations after initial filtering\n- Use local_cache=\"true\" for frequently accessed thresholds\n- Avoid overly large time windows in thresholds\n\n=== REAL-WORLD EXAMPLES ===\n\n**Brute Force Detection**\n```xml\n<rule id=\"brute_force\" name=\"Login Brute Force Detection\">\n  <check type=\"EQU\" field=\"event_type\">login</check>\n  <check type=\"EQU\" field=\"success\">false</check>\n  <threshold group_by=\"source_ip,username\" range=\"5m\" value=\"5\"/>\n  <append field=\"alert_type\">brute_force</append>\n  <append type=\"PLUGIN\" field=\"detection_time\">now()</append>\n</rule>\n```\n\n**Data Exfiltration Detection**\n```xml\n<rule id=\"data_exfil\" name=\"Data Exfiltration Detection\">\n  <check type=\"EQU\" field=\"action\">download</check>\n  <check type=\"PLUGIN\">!isPrivateIP(_$dest_ip)</check>\n  <threshold group_by=\"user_id\" range=\"1h\" count_type=\"SUM\" count_field=\"file_size\" value=\"1073741824\"/>\n  <append field=\"alert_type\">data_exfiltration</append>\n  <plugin>alertSecurityTeam(_$ORIDATA)</plugin>\n</rule>\n```\n\n**APT Detection with Complex Logic**\n```xml\n<rule id=\"apt_detection\" name=\"APT Activity Detection\">\n  <checklist condition=\"(lateral_movement or persistence) and not admin_activity\">\n    <check id=\"lateral_movement\" type=\"INCL\" field=\"process_name\" logic=\"OR\" delimiter=\"|\">\n      psexec|wmic|powershell\n    </check>\n    <check id=\"persistence\" type=\"INCL\" field=\"registry_key\" logic=\"OR\" delimiter=\"|\">\n      Run|RunOnce|Services\n    </check>\n    <check id=\"admin_activity\" type=\"EQU\" field=\"user_role\">admin</check>\n  </checklist>\n  <threshold group_by=\"hostname\" range=\"30m\" value=\"3\"/>\n  <append type=\"PLUGIN\" field=\"threat_level\">calculateThreatLevel(_$ORIDATA)</append>\n</rule>\n```\n\n**Network Anomaly Detection**\n```xml\n<rule id=\"port_scan\" name=\"Port Scanning Detection\">\n  <check type=\"PLUGIN\">!isPrivateIP(_$dest_ip)</check>\n  <threshold group_by=\"source_ip\" range=\"1m\" count_type=\"CLASSIFY\" count_field=\"dest_port\" value=\"20\"/>\n  <append field=\"alert_type\">port_scan</append>\n  <append type=\"PLUGIN\" field=\"geo_info\">geoMatch(_$source_ip)</append>\n</rule>\n```\n\n=== WHITELIST RULES ===\n\n```xml\n<root type=\"WHITELIST\" name=\"security_whitelist\">\n  <rule id=\"trusted_ips\">\n    <check type=\"INCL\" field=\"source_ip\" logic=\"OR\" delimiter=\"|\">\n      10.0.0.1|10.0.0.2|10.0.0.3\n    </check>\n  </rule>\n</root>\n```\n\n**Note**: Whitelist rules filter out matching data. append/del/plugin operations don't execute in whitelist rules.\n\n=== MANDATORY REQUIREMENTS ===\n\n⚠️ **CRITICAL VALIDATION RULES**:\n- Every rule MUST have at least one: <check>, <threshold>, or <checklist>\n- Every <checklist> MUST contain at least one <check> node\n- All check nodes in checklist must have unique 'id' attributes\n- Condition expressions can only reference declared 'id' values\n- Use lowercase logical operators: and, or, not\n\n=== COMMON PATTERNS ===\n\n**Authentication Monitoring**: group_by=\"username,source_ip\"\n**API Rate Limiting**: group_by=\"api_key\"\n**DDoS Detection**: group_by=\"source_ip\"\n**Anomaly Detection**: group_by=\"user_id\" with CLASSIFY mode\n**Threat Intelligence**: Use external lookup plugins\n**Data Enrichment**: Add timestamp, geo info, threat intel\n**Performance**: Fast checks first, expensive operations last\n\n=== DEBUGGING TIPS ===\n\n- Add debug fields: `<append field=\"_debug\">checkpoint_1</append>`\n- Test with single events first\n- Verify field references exist in sample data\n- Check threshold grouping makes sense\n- Monitor performance with real data volumes\n\nThis guide provides comprehensive syntax and examples for creating accurate, efficient rules in AgentSmith-HUB."
    },
    {
      "name": "rule_creation_quick_reference",
      "description": "Quick reference for rule creation - key syntax and critical requirements only",
      "template": "AGENTSMITH-HUB RULE CREATION QUICK REFERENCE\n\n=== MANDATORY REQUIREMENTS ===\n⚠️ Every rule MUST have: <check>, <threshold>, or <checklist>\n⚠️ Every <checklist> MUST contain at least one <check> node\n⚠️ Plugin checks support ! negation: `<check type=\"PLUGIN\">!isPrivateIP(_$ip)</check>`\n\n=== BASIC STRUCTURE ===\n```xml\n<rule id=\"unique_id\" name=\"Description\">\n  <check type=\"EQU\" field=\"field_name\">value</check>\n  <threshold group_by=\"field\" range=\"5m\" value=\"10\"/>\n  <append field=\"alert_type\">threat_detected</append>\n</rule>\n```\n\n=== ESSENTIAL CHECK TYPES ===\n- EQU/NEQ: Equal/Not equal\n- INCL/NI: Contains/Not contains\n- MT/LT: Greater/Less than\n- REGEX: Regular expression\n- PLUGIN: Plugin function\n- ISNULL/NOTNULL: Null checks\n\n=== THRESHOLD MODES ===\n- Default: Count events\n- SUM: `count_type=\"SUM\" count_field=\"amount\"`\n- CLASSIFY: `count_type=\"CLASSIFY\" count_field=\"unique_field\"`\n\n=== COMPLEX LOGIC ===\n```xml\n<checklist condition=\"(a or b) and not c\">\n  <check id=\"a\" type=\"EQU\" field=\"status\">active</check>\n  <check id=\"b\" type=\"EQU\" field=\"status\">pending</check>\n  <check id=\"c\" type=\"EQU\" field=\"blocked\">true</check>\n</checklist>\n```\n\n=== DYNAMIC REFERENCES ===\n- _$field_name: Reference field value\n- _$parent.child: Nested field access\n- _$ORIDATA: Complete data object\n\n=== PERFORMANCE ORDER ===\n1. NOTNULL, EQU (fastest)\n2. INCL, START, END\n3. REGEX\n4. PLUGIN (slowest)\n\n=== COMMON PATTERNS ===\n- Brute force: `group_by=\"source_ip,username\"`\n- Rate limiting: `group_by=\"api_key\"`\n- Port scan: `count_type=\"CLASSIFY\" count_field=\"dest_port\"`\n- Data exfil: `count_type=\"SUM\" count_field=\"file_size\"`\n\n=== KEY PLUGINS ===\n- isPrivateIP(_$ip) - Check private IP\n- now() - Current timestamp\n- hashSHA256(_$data) - Hash data\n- suppressOnce(_$key, 300, \"rule_id\") - Suppress alerts\n\nUse complete guide for detailed syntax and examples."
    }
  ],
  "rule_creation_warnings": {
    "pre_creation": "Rule creation requires real sample data. Use get_samplers_data first or provide your own real data.",
    "data_validation": "Verify all field names and values exist in your actual data before creating rules.",
    "forbidden_actions": "Never use imagined data like 'data_type=59' or 'exe=msfconsole' unless they appear in real samples.",
    "syntax_update": "Use the new flexible syntax: independent <check> tags, execution order matters, <node> is deprecated."
  },
  "plugin_creation_warnings": {
    "pre_creation": "Plugin creation must follow exact specifications. Package must be 'plugin', function must be 'Eval'.",
    "validation": "Verify package name, function signature, and import restrictions before creating plugins.",
    "forbidden_actions": "Never use external packages, wrong function names, or incorrect return types."
  },
  "data_sources": {
    "allowed": [
      "MCP Server: get_samplers_data response",
      "MCP Server: get_samplers_data_intelligent response", 
      "User Provided: Real JSON from user's actual systems"
    ],
    "forbidden": [
      "AI imagination or assumptions",
      "Example/fake data creation",
      "Field name guessing",
      "Value fabrication"
    ]
  }
} 