{
  "version": "2024-07-05",
  "prompts": [
    {
      "name": "rule_syntax_complete_guide",
      "description": "Complete comprehensive guide for AgentSmith-HUB rule engine - detailed examples and syntax for LLM learning",
      "template": "AGENTSMITH-HUB RULE ENGINE COMPLETE SYNTAX GUIDE\n\n=== CORE CONCEPTS ===\n\n1. FLEXIBLE EXECUTION ORDER\n   - Operations execute in the order they appear in XML\n   - This allows data enrichment before checks, performance optimization, and conditional processing\n   - Example: Add timestamp first, then check based on that timestamp\n\n2. RULE STRUCTURE\n   ```xml\n   <root type=\"DETECTION|EXCLUDE\" name=\"ruleset_name\" author=\"author\">\n     <rule id=\"unique_id\" name=\"Rule Description\">\n       <!-- Operations in execution order -->\n       <check type=\"EQU\" field=\"field_name\">value</check>\n       <threshold group_by=\"field\" range=\"5m\" value=\"10\"/>\n       <append field=\"new_field\">value</append>\n     </rule>\n   </root>\n   ```\n\n=== CHECK OPERATIONS ===\n\n**String Matching (Case Insensitive - IMPORTANT!)**\n- EQU: Exact match (case insensitive) - `<check type=\"EQU\" field=\"status\">active</check>`\n- NEQ: Not equal (case insensitive) - `<check type=\"NEQ\" field=\"status\">inactive</check>`\n- INCL: Contains - `<check type=\"INCL\" field=\"message\">error</check>`\n- NI: Not contains - `<check type=\"NI\" field=\"message\">success</check>`\n- START: Starts with - `<check type=\"START\" field=\"path\">/admin</check>`\n- END: Ends with - `<check type=\"END\" field=\"file\">.exe</check>`\n- NSTART: Not starts with - `<check type=\"NSTART\" field=\"path\">/public</check>`\n- NEND: Not ends with - `<check type=\"NEND\" field=\"file\">.txt</check>`\n\n**Case Insensitive Matching**\n- NCS_EQU: Case insensitive equal - `<check type=\"NCS_EQU\" field=\"protocol\">HTTP</check>`\n- NCS_NEQ: Case insensitive not equal - `<check type=\"NCS_NEQ\" field=\"method\">get</check>`\n- NCS_INCL: Case insensitive contains - `<check type=\"NCS_INCL\" field=\"header\">content-type</check>`\n- NCS_NI: Case insensitive not contains - `<check type=\"NCS_NI\" field=\"useragent\">bot</check>`\n- NCS_START: Case insensitive starts - `<check type=\"NCS_START\" field=\"domain\">www.</check>`\n- NCS_END: Case insensitive ends - `<check type=\"NCS_END\" field=\"email\">.com</check>`\n- NCS_NSTART: Case insensitive not starts - `<check type=\"NCS_NSTART\" field=\"url\">http://</check>`\n- NCS_NEND: Case insensitive not ends - `<check type=\"NCS_NEND\" field=\"filename\">.exe</check>`\n\n**Numeric Comparison**\n- MT: Greater than - `<check type=\"MT\" field=\"score\">80</check>`\n- LT: Less than - `<check type=\"LT\" field=\"age\">18</check>`\n\n**Null Checks**\n- ISNULL: Field is null - `<check type=\"ISNULL\" field=\"optional\"></check>`\n- NOTNULL: Field not null - `<check type=\"NOTNULL\" field=\"required\"></check>`\n\n**Advanced Checks**\n- REGEX: Regular expression - `<check type=\"REGEX\" field=\"ip\">^\\\\d+\\\\.\\\\d+\\\\.\\\\d+\\\\.\\\\d+$</check>`\n- PLUGIN: Plugin function - `<check type=\"PLUGIN\">isPrivateIP(_$source_ip)</check>`\n\n**Multi-value Matching**\n```xml\n<check type=\"INCL\" field=\"filename\" logic=\"OR\" delimiter=\"|\">\n  .exe|.dll|.scr|.bat\n</check>\n<check type=\"EQU\" field=\"status\" logic=\"AND\" delimiter=\",\">\n  active,verified,approved\n</check>\n```\n\n**Plugin Negation**\n```xml\n<check type=\"PLUGIN\">!isPrivateIP(_$dest_ip)</check>\n```\n\n=== THRESHOLD OPERATIONS ===\n\n**Basic Threshold**\n```xml\n<threshold group_by=\"source_ip\" range=\"5m\" value=\"10\"/>\n```\n\n**SUM Mode - Aggregate Values**\n```xml\n<threshold group_by=\"user_id\" range=\"1h\" count_type=\"SUM\" count_field=\"amount\" value=\"1000\"/>\n```\n\n**CLASSIFY Mode - Count Unique Values**\n```xml\n<threshold group_by=\"user_id\" range=\"30m\" count_type=\"CLASSIFY\" count_field=\"accessed_file\" value=\"25\"/>\n```\n\n**Performance Optimization**\n```xml\n<threshold group_by=\"user_id\" range=\"5m\" value=\"10\" local_cache=\"true\"/>\n```\n\n**Time Ranges**: s (seconds), m (minutes), h (hours), d (days)\n**Grouping**: Single field or comma-separated multiple fields\n\n=== DATA PROCESSING ===\n\n**APPEND - Add/Modify Fields**\n```xml\n<append field=\"alert_type\">suspicious_activity</append>\n<append field=\"message\">User _$username from _$source_ip</append>\n<append type=\"PLUGIN\" field=\"timestamp\">now()</append>\n```\n\n**DEL - Remove Fields**\n```xml\n<del>password</del>\n<del>password,secret_key,auth_token</del>\n```\n\n**PLUGIN - Execute Actions**\n```xml\n<plugin>sendAlert(_$ORIDATA)</plugin>\n<plugin>blockIP(_$source_ip, 3600)</plugin>\n```\n\n=== COMPLEX LOGIC WITH CHECKLIST ===\n\n```xml\n<checklist condition=\"(a or b) and not c\">\n  <check id=\"a\" type=\"EQU\" field=\"status\">active</check>\n  <check id=\"b\" type=\"EQU\" field=\"status\">pending</check>\n  <check id=\"c\" type=\"EQU\" field=\"blocked\">true</check>\n</checklist>\n```\n\n**IMPORTANT**: Every checklist MUST contain at least one check node. Empty checklists are not allowed.\n\n**Logical Operators**: and, or, not (lowercase only)\n**Grouping**: Use parentheses for precedence\n\n=== BUILT-IN PLUGINS ===\n\n**Check Plugins (Return bool)**\n- isPrivateIP(ip) - Check if IP is private\n- cidrMatch(ip, cidr) - Check IP in CIDR range\n- geoMatch(ip, country) - Check IP country\n- suppressOnce(key, seconds, ruleid) - Alert suppression\n\n**Data Processing Plugins**\n- now() - Current timestamp\n- ago(seconds) - Past timestamp\n- dayOfWeek() - Day of week (0-6)\n- hourOfDay() - Hour of day (0-23)\n- tsToDate(timestamp) - Convert to RFC3339\n- base64Encode(input) - Base64 encode\n- base64Decode(input) - Base64 decode\n- hashMD5(input) - MD5 hash\n- hashSHA1(input) - SHA1 hash\n- hashSHA256(input) - SHA256 hash\n- extractDomain(url) - Extract domain\n- extractTLD(domain) - Extract TLD\n- extractSubdomain(host) - Extract subdomain\n- replace(input, old, new) - String replace\n- regexExtract(input, pattern) - Regex extract\n- regexReplace(input, pattern, replacement) - Regex replace\n- parseJSON(jsonString) - Parse JSON\n- parseUA(userAgent) - Parse User-Agent\n- virusTotal(hash, apiKey) - VirusTotal lookup\n- shodan(ip, apiKey) - Shodan lookup\n- threatBook(value, type, apiKey) - ThreatBook lookup\n\n=== DYNAMIC REFERENCES ===\n\n- _$field_name - Reference field value\n- _$parent.child - Nested field access\n- _$ORIDATA - Complete data object\n\n**Examples**:\n```xml\n<check type=\"MT\" field=\"amount\">_$user.daily_limit</check>\n<append field=\"summary\">Alert for _$username from _$source_ip</append>\n<plugin>sendAlert(_$ORIDATA)</plugin>\n```\n\n=== PERFORMANCE OPTIMIZATION ===\n\n**Operation Performance Ranking (Fast to Slow)**:\n1. NOTNULL, ISNULL, EQU, NEQ\n2. INCL, NI, START, END\n3. MT, LT\n4. REGEX\n5. PLUGIN\n6. External API plugins\n\n**Optimization Strategies**:\n- Order checks by performance (fast first)\n- Use early filtering with high-selectivity checks\n- Place threshold operations after initial filtering\n- Use local_cache=\"true\" for frequently accessed thresholds\n- Avoid overly large time windows in thresholds\n\n=== REAL-WORLD EXAMPLES ===\n\n**Brute Force Detection**\n```xml\n<rule id=\"brute_force\" name=\"Login Brute Force Detection\">\n  <check type=\"EQU\" field=\"event_type\">login</check>\n  <check type=\"EQU\" field=\"success\">false</check>\n  <threshold group_by=\"source_ip,username\" range=\"5m\" value=\"5\"/>\n  <append field=\"alert_type\">brute_force</append>\n  <append type=\"PLUGIN\" field=\"detection_time\">now()</append>\n</rule>\n```\n\n**Data Exfiltration Detection**\n```xml\n<rule id=\"data_exfil\" name=\"Data Exfiltration Detection\">\n  <check type=\"EQU\" field=\"action\">download</check>\n  <check type=\"PLUGIN\">!isPrivateIP(_$dest_ip)</check>\n  <threshold group_by=\"user_id\" range=\"1h\" count_type=\"SUM\" count_field=\"file_size\" value=\"1073741824\"/>\n  <append field=\"alert_type\">data_exfiltration</append>\n  <plugin>alertSecurityTeam(_$ORIDATA)</plugin>\n</rule>\n```\n\n**APT Detection with Complex Logic**\n```xml\n<rule id=\"apt_detection\" name=\"APT Activity Detection\">\n  <checklist condition=\"(lateral_movement or persistence) and not admin_activity\">\n    <check id=\"lateral_movement\" type=\"INCL\" field=\"process_name\" logic=\"OR\" delimiter=\"|\">\n      psexec|wmic|powershell\n    </check>\n    <check id=\"persistence\" type=\"INCL\" field=\"registry_key\" logic=\"OR\" delimiter=\"|\">\n      Run|RunOnce|Services\n    </check>\n    <check id=\"admin_activity\" type=\"EQU\" field=\"user_role\">admin</check>\n  </checklist>\n  <threshold group_by=\"hostname\" range=\"30m\" value=\"3\"/>\n  <append type=\"PLUGIN\" field=\"threat_level\">calculateThreatLevel(_$ORIDATA)</append>\n</rule>\n```\n\n**Network Anomaly Detection**\n```xml\n<rule id=\"port_scan\" name=\"Port Scanning Detection\">\n  <check type=\"PLUGIN\">!isPrivateIP(_$dest_ip)</check>\n  <threshold group_by=\"source_ip\" range=\"1m\" count_type=\"CLASSIFY\" count_field=\"dest_port\" value=\"20\"/>\n  <append field=\"alert_type\">port_scan</append>\n  <append type=\"PLUGIN\" field=\"geo_info\">geoMatch(_$source_ip)</append>\n</rule>\n```\n\n=== EXCLUDE RULES ===\n\n```xml\n<root type=\"EXCLUDE\" name=\"security_exclude\">\n  <rule id=\"trusted_ips\">\n    <check type=\"INCL\" field=\"source_ip\" logic=\"OR\" delimiter=\"|\">\n      10.0.0.1|10.0.0.2|10.0.0.3\n    </check>\n  </rule>\n</root>\n```\n\n**Note**: Exclude rules filter out matching data. append/del/plugin operations don't execute in exclude rules.\n\n=== MANDATORY REQUIREMENTS ===\n\n⚠️ **CRITICAL VALIDATION RULES**:\n- Every rule MUST have at least one: <check>, <threshold>, or <checklist>\n- Every <checklist> MUST contain at least one <check> node\n- All check nodes in checklist must have unique 'id' attributes\n- Condition expressions can only reference declared 'id' values\n- Use lowercase logical operators: and, or, not\n\n=== COMMON PATTERNS ===\n\n**Authentication Monitoring**: group_by=\"username,source_ip\"\n**API Rate Limiting**: group_by=\"api_key\"\n**DDoS Detection**: group_by=\"source_ip\"\n**Anomaly Detection**: group_by=\"user_id\" with CLASSIFY mode\n**Threat Intelligence**: Use external lookup plugins\n**Data Enrichment**: Add timestamp, geo info, threat intel\n**Performance**: Fast checks first, expensive operations last\n\n=== DEBUGGING TIPS ===\n\n- Add debug fields: `<append field=\"_debug\">checkpoint_1</append>`\n- Test with single events first\n- Verify field references exist in sample data\n- Check threshold grouping makes sense\n- Monitor performance with real data volumes\n\n**Multiple Elements Example**
```xml
<rule id="complex_detection" name="Complex Detection with Multiple Elements">
  <!-- Multiple checks in any order -->
  <check type="EQU" field="event_type">login</check>
  <check type="EQU" field="status">failed</check>
  
  <!-- Multiple checklists -->
  <checklist condition="(a or b) and not c">
    <check id="a" type="EQU" field="user_role">admin</check>
    <check id="b" type="EQU" field="user_role">root</check>
    <check id="c" type="EQU" field="blocked">true</check>
  </checklist>
  
  <checklist condition="high_risk or medium_risk">
    <check id="high_risk" type="MT" field="risk_score">80</check>
    <check id="medium_risk" type="MT" field="risk_score">50</check>
  </checklist>
  
  <!-- Multiple thresholds -->
  <threshold group_by="source_ip" range="5m" value="10"/>
  <threshold group_by="username" range="10m" value="5"/>
  
  <!-- Multiple appends -->
  <append field="alert_type">complex_detection</append>
  <append type="PLUGIN" field="timestamp">now()</append>
  
  <!-- Multiple dels -->
  <del>password</del>
  <del>secret_key</del>
  
  <!-- Multiple plugins -->
  <plugin>pushMsgToTeams("webhook_url", _$ORIDATA)</plugin>
  <plugin>alert_soc_team(_$ORIDATA)</plugin>
  
  <!-- More checks after other operations -->
  <check type="INCL" field="message">error</check>
</rule>
```

This guide provides comprehensive syntax and examples for creating accurate, efficient rules in AgentSmith-HUB."
    },
    {
      "name": "rule_creation_quick_reference",
      "description": "Quick reference for rule creation - key syntax and critical requirements only",
      "template": "AGENTSMITH-HUB RULE CREATION QUICK REFERENCE\n\n=== MANDATORY REQUIREMENTS ===\n⚠️ Every rule MUST have: <check>, <threshold>, or <checklist>\n⚠️ Every <checklist> MUST contain at least one <check> node\n⚠️ Plugin checks support ! negation: `<check type=\"PLUGIN\">!isPrivateIP(_$ip)</check>`\n\n=== BASIC STRUCTURE ===\n```xml\n<rule id=\"unique_id\" name=\"Description\">\n  <check type=\"EQU\" field=\"field_name\">value</check>\n  <threshold group_by=\"field\" range=\"5m\" value=\"10\"/>\n  <append field=\"alert_type\">threat_detected</append>\n</rule>\n```\n\n=== ESSENTIAL CHECK TYPES ===\n- EQU/NEQ: Equal/Not equal (case insensitive)\n- INCL/NI: Contains/Not contains\n- MT/LT: Greater/Less than\n- REGEX: Regular expression\n- PLUGIN: Plugin function\n- ISNULL/NOTNULL: Null checks\n\n=== THRESHOLD MODES ===\n- Default: Count events\n- SUM: `count_type=\"SUM\" count_field=\"amount\"`\n- CLASSIFY: `count_type=\"CLASSIFY\" count_field=\"unique_field\"`\n\n=== COMPLEX LOGIC ===\n```xml\n<checklist condition=\"(a or b) and not c\">\n  <check id=\"a\" type=\"EQU\" field=\"status\">active</check>\n  <check id=\"b\" type=\"EQU\" field=\"status\">pending</check>\n  <check id=\"c\" type=\"EQU\" field=\"blocked\">true</check>\n</checklist>\n```\n\n=== DYNAMIC REFERENCES ===\n- _$field_name: Reference field value\n- _$parent.child: Nested field access\n- _$ORIDATA: Complete data object\n\n=== PERFORMANCE ORDER ===\n1. NOTNULL, EQU (fastest)\n2. INCL, START, END\n3. REGEX\n4. PLUGIN (slowest)\n\n=== COMMON PATTERNS ===\n- Brute force: `group_by=\"source_ip,username\"`\n- Rate limiting: `group_by=\"api_key\"`\n- Port scan: `count_type=\"CLASSIFY\" count_field=\"dest_port\"`\n- Data exfil: `count_type=\"SUM\" count_field=\"file_size\"`\n\n=== KEY PLUGINS ===\n- isPrivateIP(_$ip) - Check private IP\n- now() - Current timestamp\n- hashSHA256(_$data) - Hash data\n- suppressOnce(_$key, 300, \"rule_id\") - Suppress alerts\n\nUse complete guide for detailed syntax and examples."
    },
    {
      "name": "beginner_guide",
      "description": "Beginner-friendly interactive guide for new users to create their first security detection project",
      "template": "🌟 WELCOME TO AGENTSMITH-HUB - BEGINNER'S GUIDE 🌟\n\n=== YOUR SECURITY DETECTION JOURNEY STARTS HERE ===\n\nHi! I'm here to help you create your first security detection system. Don't worry if you're new - I'll guide you through every step!\n\n=== WHAT WE'LL BUILD TOGETHER ===\n\n🎯 Your Goal: Create a complete security detection pipeline\n📥 Input: Where your data comes from (Kafka, logs, etc.)\n🔍 Rules: What threats to detect (SQL injection, brute force, etc.)\n📤 Output: Where to send alerts (Elasticsearch, webhooks, etc.)\n🚀 Project: Combines everything into a working system\n\n=== LET'S START - 3 SIMPLE STEPS ===\n\n**Step 1: Tell me what you want to detect**\nJust describe it in plain language:\n- \"I want to detect SQL injection attacks\"\n- \"Monitor failed login attempts\"\n- \"Track unusual API usage\"\n- \"Detect data exfiltration\"\n\n**Step 2: Choose your data source**\n- Kafka: Real-time event streaming\n- File: Log files on disk\n- SLS: Aliyun log service\n\n**Step 3: Pick where to send alerts**\n- Elasticsearch: For visualization in Kibana\n- Kafka: For other systems to consume\n- Webhook: Send to your own API\n\n=== 🚀 QUICK START COMMAND ===\n\nJust run this and answer my questions:\n```\nproject_wizard business_goal='<what you want to detect>' data_source='kafka' auto_create='false'\n```\n\nExample:\n```\nproject_wizard business_goal='detect SQL injection attacks' data_source='kafka' auto_create='false'\n```\n\n=== WHAT HAPPENS NEXT? ===\n\n1. I'll analyze your requirements\n2. Generate all necessary configurations\n3. Show you exactly what will be created\n4. You can review and adjust before creating anything\n5. One command to start monitoring!\n\n=== COMMON BEGINNER QUESTIONS ===\n\n**Q: Do I need to know XML or YAML?**\nA: No! I'll generate everything for you. You just describe what you want.\n\n**Q: What if I make a mistake?**\nA: No worries! Everything can be updated or deleted. We'll start with dry-run mode.\n\n**Q: How do I know if it's working?**\nA: I'll help you test with sample data and show you the results.\n\n**Q: Can I start with something simple?**\nA: Absolutely! Let's start with basic threat detection and grow from there.\n\n=== YOUR FIRST PROJECT IDEAS ===\n\n🔒 **Security Monitoring Starter Pack:**\n1. Failed login detection (catch brute force)\n2. SQL injection detection (protect databases)\n3. Port scanning detection (spot reconnaissance)\n4. API rate limit monitoring (prevent abuse)\n\n=== HANDS-ON EXAMPLE ===\n\nLet's create a brute force detector together:\n\n```\n# Step 1: Create the project (I'll do the hard work!)\nproject_wizard business_goal='detect brute force login attacks' data_source='kafka' auto_create='true'\n\n# Step 2: Start monitoring\nproject_control action='start' project_id='brute_force_detection'\n\n# Step 3: Check it's working\nproject_control action='status' project_id='brute_force_detection'\n```\n\n=== NEED HELP? ===\n\n🆘 **If you get stuck:**\n- Just ask: \"How do I...\"\n- Say: \"Help me create...\"\n- Request: \"Show me an example of...\"\n\n💡 **Pro tip**: Start with one simple detection rule, test it, then add more complexity.\n\n=== READY? LET'S BEGIN! ===\n\nTell me:\n1. What security threat concerns you most?\n2. Where is your data coming from?\n3. Where should alerts go?\n\nI'll handle the rest! 🚀"
    },
    {
      "name": "expert_mode_guide",
      "description": "Expert mode guide for advanced users - performance optimization, complex rule patterns, and enterprise deployment",
      "template": "🔧 AGENTSMITH-HUB EXPERT MODE - ADVANCED TECHNIQUES 🔧\n\n=== PERFORMANCE OPTIMIZATION STRATEGIES ===\n\n**Rule Engine Performance Hierarchy**\n```\nOperation Cost (μs):\nNOTNULL/ISNULL: ~0.1\nEQU/NEQ: ~0.2\nINCL/NI: ~0.5-2 (depends on string length)\nSTART/END: ~0.3-1\nMT/LT: ~0.15\nREGEX: ~1-50 (complexity dependent)\nPLUGIN: ~0.5-100\nExternal API: ~10-1000ms\n```\n\n**Optimization Patterns**\n1. **Early Filtering**: Place high-selectivity, low-cost checks first\n2. **Lazy Evaluation**: Expensive operations after cheap filters\n3. **Threshold Caching**: Use `local_cache=\"true\"` for hot paths\n4. **Batch Processing**: Aggregate operations where possible\n\n=== ADVANCED RULE PATTERNS ===\n\n**Multi-Stage APT Detection**\n```xml\n<rule id=\"apt_chain_detection\">\n  <!-- Stage 1: Initial compromise indicators -->\n  <checklist condition=\"(a or b) and not c\">\n    <check id=\"a\" type=\"REGEX\" field=\"process_cmd\">powershell.*-enc.*</check>\n    <check id=\"b\" type=\"INCL\" field=\"network.dst_port\" logic=\"OR\" delimiter=\"|\">\n      4444|8080|8888|9999\n    </check>\n    <check id=\"c\" type=\"EQU\" field=\"process.parent\">services.exe</check>\n  </checklist>\n  \n  <!-- Stage 2: Lateral movement detection -->\n  <threshold group_by=\"src_ip,user\" range=\"30m\" count_type=\"CLASSIFY\" \n            count_field=\"dst_host\" value=\"5\" local_cache=\"true\"/>\n  \n  <!-- Stage 3: Enrichment and correlation -->\n  <append type=\"PLUGIN\" field=\"threat_score\">calculateThreatScore(_$ORIDATA)</append>\n  <append type=\"PLUGIN\" field=\"attack_stage\">identifyKillChainPhase(_$indicators)</append>\n  \n  <!-- Stage 4: Conditional alerting -->\n  <plugin>conditionalAlert(_$threat_score, _$attack_stage)</plugin>\n</rule>\n```\n\n**Behavioral Baseline with Adaptive Thresholds**\n```xml\n<rule id=\"adaptive_anomaly\">\n  <append type=\"PLUGIN\" field=\"baseline\">getUserBaseline(_$user_id)</append>\n  <check type=\"PLUGIN\">isAnomalous(_$current_behavior, _$baseline)</check>\n  <threshold group_by=\"user_id\" range=\"_$baseline.window\" \n            value=\"_$baseline.threshold\" local_cache=\"true\"/>\n  <plugin>updateBaseline(_$user_id, _$current_behavior)</plugin>\n</rule>\n```\n\n=== ENTERPRISE DEPLOYMENT PATTERNS ===\n\n**1. Multi-Tenant Isolation**\n```yaml\n# Project structure for multi-tenant\nprojects:\n  tenant_a_detection:\n    input: kafka_tenant_a\n    ruleset: tenant_a_rules\n    output: es_tenant_a\n    \n  tenant_b_detection:\n    input: kafka_tenant_b  \n    ruleset: tenant_b_rules\n    output: es_tenant_b\n```\n\n**2. High-Availability Configuration**\n```yaml\n# Cluster configuration\ncluster:\n  mode: \"leader\"\n  redis:\n    sentinel_mode: true\n    sentinels:\n      - \"sentinel1:26379\"\n      - \"sentinel2:26379\"\n      - \"sentinel3:26379\"\n  heartbeat_interval: \"5s\"\n  election_timeout: \"10s\"\n```\n\n**3. Performance Tuning Parameters**\n```yaml\n# Component optimization\ninput:\n  batch_size: 5000  # Increase for throughput\n  flush_interval: \"100ms\"  # Decrease for latency\n  worker_count: 16  # Match CPU cores\n  \nruleset:\n  parallel_execution: true\n  cache_size: \"1GB\"\n  threshold_precision: \"1s\"  # Balance accuracy vs performance\n```\n\n=== COMPLEX DATA PROCESSING ===\n\n**Custom Plugin for ML Scoring**\n```go\npackage plugin\n\nimport (\n    \"encoding/json\"\n    \"math\"\n)\n\nfunc Eval(funcName string, params ...interface{}) (interface{}, error) {\n    switch funcName {\n    case \"mlAnomalyScore\":\n        data := params[0].(map[string]interface{})\n        features := extractFeatures(data)\n        score := calculateAnomalyScore(features)\n        return score > 0.85, nil  // Return true if anomalous\n    }\n    return nil, nil\n}\n```\n\n**State Machine Detection**\n```xml\n<rule id=\"attack_state_machine\">\n  <!-- Track state transitions -->\n  <append type=\"PLUGIN\" field=\"current_state\">\n    getAttackState(_$user_id, _$last_action)\n  </append>\n  \n  <!-- Check for invalid transitions -->\n  <check type=\"PLUGIN\">\n    isInvalidTransition(_$current_state, _$action)\n  </check>\n  \n  <!-- Update state -->\n  <plugin>\n    updateAttackState(_$user_id, _$current_state)\n  </plugin>\n</rule>\n```\n\n=== PERFORMANCE MONITORING ===\n\n**Key Metrics to Track**\n```\n1. Rule Execution Time: P50, P95, P99\n2. Threshold Cache Hit Rate\n3. Event Processing Rate (EPS)\n4. Memory Usage per Rule\n5. CPU Usage per Component\n```\n\n**Profiling Commands**\n```bash\n# Enable profiling\ncurl -X POST http://hub-api:8090/debug/pprof/profile?seconds=30\n\n# Analyze rule performance\ncurl http://hub-api:8090/metrics | grep rule_execution\n\n# Check threshold cache stats  \ncurl http://hub-api:8090/stats/threshold_cache\n```\n\n=== DEBUGGING TECHNIQUES ===\n\n**1. Rule Execution Tracing**\n```xml\n<rule id=\"debug_rule\">\n  <append field=\"_debug_1\">check_start</append>\n  <check type=\"EQU\" field=\"status\">active</check>\n  <append field=\"_debug_2\">check_passed</append>\n  <threshold group_by=\"user\" range=\"5m\" value=\"10\"/>\n  <append field=\"_debug_3\">threshold_evaluated</append>\n  <append field=\"_trace\">_$_debug_1,_$_debug_2,_$_debug_3</append>\n</rule>\n```\n\n**2. Data Flow Analysis**\n```yaml\n# Enable debug logging\nlogging:\n  level: debug\n  components:\n    - ruleset\n    - threshold\n  trace_fields:\n    - user_id\n    - request_id\n```\n\n=== ENTERPRISE INTEGRATION ===\n\n**SIEM Integration Pattern**\n```xml\n<rule id=\"siem_enrichment\">\n  <!-- Normalize for SIEM -->\n  <append field=\"event.category\">network</append>\n  <append field=\"event.type\">connection</append>\n  <append field=\"event.severity\">_$threat_level</append>\n  \n  <!-- Add MITRE ATT&CK mapping -->\n  <append type=\"PLUGIN\" field=\"mitre.technique\">\n    mapToMITRE(_$indicators)\n  </append>\n  \n  <!-- CEF format conversion -->\n  <append type=\"PLUGIN\" field=\"cef_output\">\n    toCEF(_$ORIDATA)\n  </append>\n</rule>\n```\n\n=== OPTIMIZATION CHECKLIST ===\n\n□ Rules ordered by selectivity (most selective first)\n□ Threshold operations after initial filtering\n□ local_cache enabled for hot thresholds\n□ Batch operations where possible\n□ Expensive plugins called conditionally\n□ Proper indexing on group_by fields\n□ Connection pooling for external calls\n□ Circuit breakers for external dependencies\n□ Monitoring and alerting on performance metrics\n□ Regular performance profiling scheduled\n\n=== EXPERT TIPS ===\n\n1. **Threshold Window Selection**: Use shorter windows (1-5m) for real-time detection, longer (1-24h) for behavioral analysis\n\n2. **Memory Management**: Each threshold with local_cache consumes ~100KB + (entries * 50B)\n\n3. **Parallel Processing**: Rules execute independently; design for parallelism\n\n4. **State Management**: Use Redis for cross-rule state sharing\n\n5. **Testing at Scale**: Use `rule_ai_generator` with production data samples\n\n=== ADVANCED COMMANDS ===\n\n```bash\n# Batch deploy with validation\nbatch_operation_manager operations='[\n  {\"type\":\"create\",\"component\":\"ruleset\",\"id\":\"advanced_rules\",\"content\":\"...\"},\n  {\"type\":\"update\",\"component\":\"project\",\"id\":\"main\",\"content\":\"...\"}\n]' transaction_mode='true' dependency_check='true'\n\n# Performance analysis\nget_samplers_data_intelligent analysis_mode='advanced' anomaly_detection='true'\n\n# Generate optimized rules\nrule_ai_generator detection_goal='zero-day exploit' sensitivity='high' optimization_focus='performance'\n```\n\nRemember: With great power comes great responsibility. Test thoroughly in staging before production deployment!"
    },
    {
      "name": "error_recovery_guide",
      "description": "Intelligent error recovery guide - diagnose issues and provide automated solutions",
      "template": "🚨 AGENTSMITH-HUB ERROR RECOVERY GUIDE 🚨\n\n=== DON'T PANIC! I'M HERE TO HELP ===\n\nLet me help you diagnose and fix the issue. Follow this intelligent troubleshooting guide.\n\n=== COMMON ERRORS AND INSTANT FIXES ===\n\n**1. \"Component not found\" Error**\n```bash\n# Check if component exists\nexplore_components  # Lists all components\n\n# If missing, create it:\ncomponent_wizard component_type='<type>' component_id='<id>' use_template='true'\n```\n\n**2. \"Project failed to start\" Error**\n```bash\n# Step 1: Check project status\nproject_control action='status' project_id='<project_id>'\n\n# Step 2: View error logs\nget_error_logs project_id='<project_id>' tail='50'\n\n# Step 3: Common fixes\n# - Missing component: Create it\n# - Configuration error: Update component\n# - Resource issue: Check system resources\n```\n\n**3. \"Rule validation failed\" Error**\n```bash\n# Get sample data first\nget_samplers_data_intelligent target_projects='<project_id>'\n\n# Test your rule\ntest_lab test_target='ruleset' component_id='<ruleset_id>' custom_data='<sample_json>'\n\n# Common issues:\n# - Field doesn't exist in data\n# - Wrong check type for field type\n# - Syntax error in XML\n```\n\n**4. \"Connection refused\" Errors**\n```\nKafka: Check broker address (default: localhost:9092)\nElasticsearch: Check host (default: http://localhost:9200)\nRedis: Check host and password (default: localhost:6379, password: toor)\n```\n\n=== SMART DIAGNOSTIC COMMANDS ===\n\n**System Health Check**\n```bash\n# Complete system diagnosis\nsystem_overview include_metrics='true' include_suggestions='true'\n\n# Cluster status (if using cluster mode)\nget_cluster_status\n\n# Performance metrics\nget_metrics\n```\n\n**Component Validation**\n```bash\n# Test any component\ntest_lab test_target='component' component_id='<id>' test_mode='thorough'\n\n# Verify pending changes\nget_pending_changes\n\n# Validate before deployment\nsmart_deployment dry_run='true'\n```\n\n=== ERROR PATTERNS AND SOLUTIONS ===\n\n**Pattern: \"Parse error in rule\"**\n- Cause: Invalid XML syntax\n- Solution:\n  ```bash\n  # Use AI to fix it\n  rule_ai_generator detection_goal='<same goal>' sample_data='<your data>' ruleset_id='<id>' auto_deploy='false'\n  ```\n\n**Pattern: \"Threshold memory exceeded\"**\n- Cause: Too many unique values in group_by\n- Solution:\n  ```xml\n  <!-- Add local_cache and adjust window -->\n  <threshold group_by=\"field\" range=\"5m\" value=\"10\" local_cache=\"true\"/>\n  ```\n\n**Pattern: \"Input buffer overflow\"**\n- Cause: Processing slower than input rate\n- Solution:\n  ```yaml\n  # Increase batch size and workers\n  batch_size: 5000\n  worker_count: 8\n  flush_interval: \"500ms\"\n  ```\n\n=== AUTOMATED RECOVERY PROCEDURES ===\n\n**1. Project Recovery**\n```bash\n# Stop everything\nproject_control action='stop_all'\n\n# Clear error state\nget_pending_changes  # Check what needs fixing\nsmart_deployment force_deploy='true'  # Apply fixes\n\n# Restart with monitoring\nproject_control action='start' project_id='<id>' wait_ready='true'\n```\n\n**2. Rule Recovery**\n```bash\n# Backup current rules\nrule_manager action='view_rules' id='<ruleset_id>' > backup.xml\n\n# Generate fixed version\nrule_ai_generator detection_goal='<goal>' sample_data='<data>' sensitivity='medium'\n\n# Test before applying\ntest_lab test_target='ruleset' component_id='<id>' custom_data='<test_data>'\n```\n\n**3. Data Pipeline Recovery**\n```bash\n# Check data flow\nget_samplers_data_intelligent analysis_mode='advanced' anomaly_detection='true'\n\n# If no data, check input\ntest_lab test_target='component' component_id='<input_id>' test_mode='thorough'\n\n# Restart pipeline\nbatch_operation_manager operations='[\n  {\"type\":\"restart\",\"component\":\"project\",\"id\":\"<project_id>\"}\n]'\n```\n\n=== PREVENTION TIPS ===\n\n**Before Making Changes:**\n1. Always test with: `dry_run='true'`\n2. Use transactions: `transaction_mode='true'`\n3. Keep backups: Export configurations first\n\n**Best Practices:**\n- Start simple, add complexity gradually\n- Test each component independently\n- Monitor logs during deployment\n- Use batch operations for multiple changes\n\n=== EMERGENCY COMMANDS ===\n\n```bash\n# STOP EVERYTHING\nproject_control action='stop_all'\n\n# VIEW ALL ERRORS\nget_error_logs tail='100'\n\n# ROLLBACK CHANGES\n# (Manually revert to backup configurations)\n\n# RESET AND RESTART\nsmart_deployment force_deploy='true'\nproject_control action='start_all'\n```\n\n=== GET HUMAN HELP ===\n\nIf automated recovery doesn't work:\n\n1. **Collect Diagnostics:**\n   ```bash\n   system_overview > diagnostics.txt\n   get_error_logs tail='200' >> diagnostics.txt\n   get_pending_changes >> diagnostics.txt\n   ```\n\n2. **Share:**\n   - Error messages\n   - What you were trying to do\n   - Diagnostics file\n\n3. **Quick Fixes While Waiting:**\n   - Restart in safe mode (stop all, start one by one)\n   - Use simpler rules temporarily\n   - Reduce data volume\n\n=== LEARNING FROM ERRORS ===\n\nEvery error is a learning opportunity:\n- Document what caused it\n- Update your rules/configs\n- Add monitoring for similar issues\n- Share solutions with team\n\nRemember: The system is designed to be resilient. Most issues can be fixed without data loss!\n\n💡 **Pro tip**: Use `test_lab` before any production changes!"
    }
  ],
  "rule_creation_warnings": {
    "pre_creation": "Rule creation requires real sample data. Use get_samplers_data first or provide your own real data.",
    "data_validation": "Verify all field names and values exist in your actual data before creating rules.",
    "forbidden_actions": "Never use imagined data like 'data_type=59' or 'exe=msfconsole' unless they appear in real samples.",
    "syntax_update": "Use the new flexible syntax: independent <check> tags, execution order matters, <node> is deprecated."
  },
  "plugin_creation_warnings": {
    "pre_creation": "Plugin creation must follow exact specifications. Package must be 'plugin', function must be 'Eval'.",
    "validation": "Verify package name, function signature, and import restrictions before creating plugins.",
    "forbidden_actions": "Never use external packages, wrong function names, or incorrect return types."
  },
  "plugin_guides": {
    "complete_guide": "Use plugin_creation_complete_guide for comprehensive plugin development information",
    "quick_reference": "Use plugin_quick_reference for fast syntax lookup",
    "creation_wizard": "Use plugin_creation_wizard for interactive plugin creation",
    "troubleshooting": "Use plugin_troubleshooting_guide for debugging plugin issues"
  },
  "data_sources": {
    "allowed": [
      "MCP Server: get_samplers_data response",
      "MCP Server: get_samplers_data_intelligent response", 
      "User Provided: Real JSON from user's actual systems"
    ],
    "forbidden": [
      "AI imagination or assumptions",
      "Example/fake data creation",
      "Field name guessing",
      "Value fabrication"
    ]
  }
} 