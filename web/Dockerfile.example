# AgentSmith-HUB Frontend Dockerfile Example
# This Dockerfile demonstrates how to use runtime configuration in containerized deployments

# Build stage
FROM node:18-alpine AS builder

WORKDIR /app

# Copy package files
COPY package*.json ./
RUN npm ci --only=production

# Copy source code
COPY . .

# Build the application
RUN npm run build

# Production stage
FROM nginx:alpine

# Copy built files
COPY --from=builder /app/dist /usr/share/nginx/html

# Copy configuration template
COPY --from=builder /app/config.template.json /usr/share/nginx/html/config.template.json

# Copy nginx configuration
COPY nginx.conf /etc/nginx/nginx.conf

# Install envsubst (part of gettext package)
RUN apk add --no-cache gettext

# Create startup script
RUN echo '#!/bin/sh' > /docker-entrypoint.sh && \
    echo 'set -e' >> /docker-entrypoint.sh && \
    echo '' >> /docker-entrypoint.sh && \
    echo '# Default values' >> /docker-entrypoint.sh && \
    echo 'export API_BASE_URL=${API_BASE_URL:-"http://localhost:8080"}' >> /docker-entrypoint.sh && \
    echo 'export API_TIMEOUT=${API_TIMEOUT:-30000}' >> /docker-entrypoint.sh && \
    echo 'export DEBUG_MODE=${DEBUG_MODE:-false}' >> /docker-entrypoint.sh && \
    echo 'export CLUSTER_MODE=${CLUSTER_MODE:-true}' >> /docker-entrypoint.sh && \
    echo 'export THEME=${THEME:-light}' >> /docker-entrypoint.sh && \
    echo 'export LANGUAGE=${LANGUAGE:-en}' >> /docker-entrypoint.sh && \
    echo '' >> /docker-entrypoint.sh && \
    echo '# Generate configuration file from template' >> /docker-entrypoint.sh && \
    echo 'echo "ðŸ”§ Generating configuration..."' >> /docker-entrypoint.sh && \
    echo 'envsubst < /usr/share/nginx/html/config.template.json > /usr/share/nginx/html/config.json' >> /docker-entrypoint.sh && \
    echo '' >> /docker-entrypoint.sh && \
    echo '# Show generated configuration' >> /docker-entrypoint.sh && \
    echo 'echo "ðŸ“‹ Configuration generated:"' >> /docker-entrypoint.sh && \
    echo 'cat /usr/share/nginx/html/config.json' >> /docker-entrypoint.sh && \
    echo '' >> /docker-entrypoint.sh && \
    echo '# Remove template file' >> /docker-entrypoint.sh && \
    echo 'rm -f /usr/share/nginx/html/config.template.json' >> /docker-entrypoint.sh && \
    echo '' >> /docker-entrypoint.sh && \
    echo '# Start nginx' >> /docker-entrypoint.sh && \
    echo 'echo "ðŸš€ Starting nginx..."' >> /docker-entrypoint.sh && \
    echo 'exec nginx -g "daemon off;"' >> /docker-entrypoint.sh

# Make startup script executable
RUN chmod +x /docker-entrypoint.sh

# Expose port
EXPOSE 80

# Set default environment variables
ENV API_BASE_URL=http://localhost:8080
ENV API_TIMEOUT=30000
ENV DEBUG_MODE=false
ENV CLUSTER_MODE=true
ENV THEME=light
ENV LANGUAGE=en

# Use custom entrypoint
ENTRYPOINT ["/docker-entrypoint.sh"]

# Build and run examples:
#
# 1. Build image:
#    docker build -f Dockerfile.example -t agentsmith-hub-frontend .
#
# 2. Run with default configuration:
#    docker run -p 8080:80 agentsmith-hub-frontend
#
# 3. Run with custom configuration:
#    docker run -p 8080:80 \
#      -e API_BASE_URL=https://api.example.com:8080 \
#      -e API_TIMEOUT=60000 \
#      -e DEBUG_MODE=true \
#      agentsmith-hub-frontend
#
# 4. Run with configuration file volume:
#    docker run -p 8080:80 \
#      -v $(pwd)/config.json:/usr/share/nginx/html/config.json \
#      agentsmith-hub-frontend 