name: Build and Release AgentSmith-HUB

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  BINARY_NAME: agentsmith-hub

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    strategy:
      matrix:
        arch: [amd64, arm64]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24.5'
        cache: true
        cache-dependency-path: src/go.sum
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: web/package-lock.json
    
    - name: Install frontend dependencies
      run: |
        cd web
        npm ci
    
    - name: Install build dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential
        if [ "${{ matrix.arch }}" = "arm64" ]; then
          sudo apt-get install -y gcc-aarch64-linux-gnu
        fi
    
    - name: Build frontend
      run: |
        cd web
        npm run build
    
    - name: Build backend
      run: |
        cd src
        mkdir -p ../build
        
        # Set architecture-specific build variables
        if [ "${{ matrix.arch }}" = "arm64" ]; then
          export CC=aarch64-linux-gnu-gcc
          export GOOS=linux
          export GOARCH=arm64
          LIB_PATH="$(pwd)/../lib/linux/arm64"
        else
          export GOOS=linux
          export GOARCH=amd64
          LIB_PATH="$(pwd)/../lib/linux/amd64"
        fi
        
        export CGO_ENABLED=1
        export CGO_LDFLAGS="-L${LIB_PATH} -lrure -Wl,-rpath,${LIB_PATH}"
        export LD_LIBRARY_PATH="${LIB_PATH}:$LD_LIBRARY_PATH"
        
        # Verify library exists
        if [ ! -f "${LIB_PATH}/librure.so" ]; then
          echo "ERROR: Cannot find librure.so at ${LIB_PATH}"
          ls -la ../lib/ || echo "lib directory not found"
          exit 1
        fi
        
        # Build with version information
        VERSION=$(cat ../VERSION 2>/dev/null | tr -d '\n\r ' || echo "unknown")
        BUILD_TIME=$(date -u '+%Y-%m-%d %H:%M:%S UTC')
        GIT_COMMIT=$(git rev-parse --short HEAD 2>/dev/null || echo "unknown")
        LDFLAGS="-s -w -X 'main.Version=$VERSION' -X 'main.BuildTime=$BUILD_TIME' -X 'main.GitCommit=$GIT_COMMIT'"
        
        # Copy library to system path for linking
        sudo cp "${LIB_PATH}/librure.so" /usr/lib/
        sudo ldconfig
        
        # Build the binary
        if go build -ldflags "$LDFLAGS" -o ../build/${BINARY_NAME}-${{ matrix.arch }} .; then
          echo "✓ Build completed successfully"
          ls -la ../build/${BINARY_NAME}-${{ matrix.arch }}
        else
          echo "✗ Build failed"
          exit 1
        fi
    
    - name: Get version info
      id: version
      run: |
        VERSION=$(cat VERSION 2>/dev/null | tr -d '\n\r ' || echo "unknown")
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          RELEASE_NAME=${GITHUB_REF#refs/tags/}
        else
          RELEASE_NAME="${VERSION}-$(date +'%Y%m%d')-$(git rev-parse --short HEAD)"
        fi
        RELEASE_NAME=$(echo "$RELEASE_NAME" | tr -d '\n\r ')
        echo "release_name=$RELEASE_NAME" >> $GITHUB_OUTPUT
    
    - name: Create deployment archive
      run: |
        ARCHIVE_DIR="agentsmith-hub"
        ARCHIVE_NAME="agentsmith-hub-${{ matrix.arch }}.tar.gz"
        
        echo "Creating archive: $ARCHIVE_NAME"
        
        # Create the archive directory
        mkdir -p "$ARCHIVE_DIR"
        
        # Copy binary
        cp "build/${BINARY_NAME}-${{ matrix.arch }}" "$ARCHIVE_DIR/$BINARY_NAME"
        chmod +x "$ARCHIVE_DIR/$BINARY_NAME"
        
        # Copy frontend files
        cp -r web/dist "$ARCHIVE_DIR/web"
        
        # Copy architecture-specific libraries
        mkdir -p "$ARCHIVE_DIR/lib"
        cp -r "lib/linux/${{ matrix.arch }}"/* "$ARCHIVE_DIR/lib/"
        
        # Copy configuration files
        cp -r config "$ARCHIVE_DIR/"
        cp -r mcp_config "$ARCHIVE_DIR/"
        
        # Copy nginx configuration
        mkdir -p "$ARCHIVE_DIR/nginx"
        cp script/nginx.conf "$ARCHIVE_DIR/nginx/nginx.conf"
        
        # Generate architecture-aware scripts
        chmod +x ./script/create_scripts.sh
        ./script/create_scripts.sh "$ARCHIVE_DIR" "${{ matrix.arch }}"
        
        # Copy documentation
        cp README.md "$ARCHIVE_DIR/"
        cp LICENSE "$ARCHIVE_DIR/"
        cp VERSION "$ARCHIVE_DIR/"
        
        # Create the tar.gz archive
        tar -czf "$ARCHIVE_NAME" "$ARCHIVE_DIR"
        
        # Create checksum
        sha256sum "$ARCHIVE_NAME" > "${ARCHIVE_NAME}.sha256"
        
        # Clean up
        rm -rf "$ARCHIVE_DIR"
        
        echo "Archive created successfully: $ARCHIVE_NAME"
        ls -la *.tar.gz*
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: agentsmith-hub-${{ matrix.arch }}-${{ steps.version.outputs.release_name }}
        path: |
          agentsmith-hub-${{ matrix.arch }}.tar.gz
          agentsmith-hub-${{ matrix.arch }}.tar.gz.sha256
        retention-days: 30
    


  create-release:
    if: startsWith(github.ref, 'refs/tags/')
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: agentsmith-hub-*
          path: .
          merge-multiple: true

      - name: Get version info
        id: version
        run: |
          VERSION=$(cat VERSION 2>/dev/null | tr -d '\n\r ' || echo "unknown")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            RELEASE_NAME=${GITHUB_REF#refs/tags/}
          else
            RELEASE_NAME="${VERSION}-$(date +'%Y%m%d')-$(git rev-parse --short HEAD)"
          fi
          RELEASE_NAME=$(echo "$RELEASE_NAME" | tr -d '\n\r ')
          echo "release_name=$RELEASE_NAME" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            agentsmith-hub-amd64.tar.gz
            agentsmith-hub-amd64.tar.gz.sha256
            agentsmith-hub-arm64.tar.gz
            agentsmith-hub-arm64.tar.gz.sha256
          body: |
            ## AgentSmith-HUB Release ${{ github.ref_name }}
            
            ### What's Included
            
            - Pre-built Linux binaries (AMD64 and ARM64)
            - Frontend web application
            - Required libraries (librure.so for both architectures)
            - Configuration templates
            - Nginx configuration for web serving
            - Architecture-aware start and stop scripts
            - Deployment documentation
            
            ### Quick Start
            
            1. Download the appropriate archive for your architecture:
               - For AMD64: `agentsmith-hub-amd64.tar.gz`
               - For ARM64: `agentsmith-hub-arm64.tar.gz`
            
            2. Extract and deploy:
               ```bash
               tar -xzf agentsmith-hub-[architecture].tar.gz
               cd agentsmith-hub
               ```
            
            3. Configure your settings in `config/config.yaml`
            
            4. Run `./start.sh` to start the application
            
            5. Access the web interface:
               - With nginx: http://localhost
               - Direct backend: http://localhost:8080
            
            ### Architecture Support
            
            - **AMD64**: Standard x86_64 architecture (Intel/AMD processors)
            - **ARM64**: ARM 64-bit architecture (Apple Silicon, ARM servers)
            
            ### Version Information
            
            - Version: ${{ steps.version.outputs.version }}
            - Git Commit: ${{ github.sha }}
            - Build Date: $(date -u +'%Y-%m-%d %H:%M:%S UTC')
            
            See README.md in the package for detailed deployment instructions.
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  push-docker-image:
    if: github.event_name == 'push'
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: agentsmith-hub-*
          path: .
          merge-multiple: true

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }} 