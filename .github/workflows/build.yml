name: Build and Release AgentSmith-HUB

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  BINARY_NAME: agentsmith-hub

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64, arm64]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for git info
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24.5'
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: web/package-lock.json
    
    - name: Install frontend dependencies
      run: |
        cd web
        npm ci
    
    - name: Install build dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential
        # Install cross-compilation tools for ARM64
        if [ "${{ matrix.arch }}" = "arm64" ]; then
          sudo apt-get install -y gcc-aarch64-linux-gnu
        fi
    
    - name: Build frontend
      run: |
        cd web
        npm run build
    
    - name: Build backend
      run: |
        cd src
        mkdir -p ../build
        
        # Set architecture-specific build variables
        if [ "${{ matrix.arch }}" = "arm64" ]; then
          export CC=aarch64-linux-gnu-gcc
          export CGO_ENABLED=1
          export GOOS=linux
          export GOARCH=arm64
          LIB_PATH="$(pwd)/../lib/linux/arm64"
          export CGO_LDFLAGS="-L${LIB_PATH} -lrure -Wl,-rpath,${LIB_PATH}"
          export LD_LIBRARY_PATH="${LIB_PATH}:$LD_LIBRARY_PATH"
        else
          export CGO_ENABLED=1
          export GOOS=linux
          export GOARCH=amd64
          LIB_PATH="$(pwd)/../lib/linux/amd64"
          export CGO_LDFLAGS="-L${LIB_PATH} -lrure -Wl,-rpath,${LIB_PATH}"
          export LD_LIBRARY_PATH="${LIB_PATH}:$LD_LIBRARY_PATH"
        fi
        
        # Verify library exists and show debug info
        echo "Library path: ${LIB_PATH}"
        ls -la "${LIB_PATH}/"
        echo "CGO_LDFLAGS: $CGO_LDFLAGS"
        echo "LD_LIBRARY_PATH: $LD_LIBRARY_PATH"
        
        # Build with version information
        VERSION=$(cat ../VERSION 2>/dev/null | tr -d '\n\r ' || echo "unknown")
        BUILD_TIME=$(date -u '+%Y-%m-%d %H:%M:%S UTC')
        GIT_COMMIT=$(git rev-parse --short HEAD 2>/dev/null || echo "unknown")
        LDFLAGS="-s -w -X 'main.Version=$VERSION' -X 'main.BuildTime=$BUILD_TIME' -X 'main.GitCommit=$GIT_COMMIT'"
        
        # Try building with different approaches
        BUILD_SUCCESS=false
        
        # Method 1: Try copying library to system path first
        echo "Attempting to copy library to system path..."
        sudo cp "${LIB_PATH}/librure.so" /usr/lib/
        sudo ldconfig
        
        echo "Attempting CGO build with system library..."
        if go build -ldflags "$LDFLAGS" -o ../build/${BINARY_NAME}-${{ matrix.arch }} .; then
          BUILD_SUCCESS=true
          echo "CGO build with system library succeeded"
        else
          echo "CGO build with system library failed"
          
          # Method 2: Try with library path
          echo "Attempting CGO build with library path..."
          if go build -ldflags "$LDFLAGS" -o ../build/${BINARY_NAME}-${{ matrix.arch }} .; then
            BUILD_SUCCESS=true
            echo "CGO build with library path succeeded"
          else
            echo "CGO build with library path failed"
            echo "Note: This project requires CGO and librure.so for regex functionality"
            echo "Static build without CGO is not supported due to rure-go dependency"
            exit 1
          fi
        fi
        
        if [ "$BUILD_SUCCESS" = "true" ]; then
          echo "Build completed successfully"
          ls -la ../build/${BINARY_NAME}-${{ matrix.arch }}
          echo "Checking binary dependencies:"
          ldd ../build/${BINARY_NAME}-${{ matrix.arch }} || echo "ldd not available or static binary"
        else
          echo "Build failed"
          exit 1
        fi
    
    - name: Get version info
      id: version
      run: |
        VERSION=$(cat VERSION 2>/dev/null | tr -d '\n\r ' || echo "unknown")
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
        # Set release name based on tag or branch
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          RELEASE_NAME=${GITHUB_REF#refs/tags/}
        else
          RELEASE_NAME="${VERSION}-$(date +'%Y%m%d')-$(git rev-parse --short HEAD)"
        fi
        # Remove any spaces and newlines from release name
        RELEASE_NAME=$(echo "$RELEASE_NAME" | tr -d '\n\r ')
        echo "release_name=$RELEASE_NAME" >> $GITHUB_OUTPUT
    
    - name: Create deployment archive
      run: |
        # Create a clean directory structure for the archive
        RELEASE_NAME="${{ steps.version.outputs.release_name }}"
        ARCHIVE_DIR="agentsmith-hub-${{ matrix.arch }}"
        ARCHIVE_NAME="agentsmith-hub-${{ matrix.arch }}.tar.gz"
        
        echo "Creating archive: $ARCHIVE_NAME"
        echo "Architecture: ${{ matrix.arch }}"
        
        # Create the archive directory
        mkdir -p "$ARCHIVE_DIR"
        
        # Copy binary (rename to standard name)
        cp "build/${BINARY_NAME}-${{ matrix.arch }}" "$ARCHIVE_DIR/$BINARY_NAME"
        chmod +x "$ARCHIVE_DIR/$BINARY_NAME"
        
        # Copy frontend files
        cp -r web/dist "$ARCHIVE_DIR/web"
        
        # Copy architecture-specific libraries
        mkdir -p "$ARCHIVE_DIR/lib"
        cp -r "lib/linux/${{ matrix.arch }}"/* "$ARCHIVE_DIR/lib/"
        
        # Copy configuration files
        cp -r config "$ARCHIVE_DIR/"
        cp -r mcp_config "$ARCHIVE_DIR/"
        
        # Generate architecture-aware scripts
        ./script/create_scripts.sh "$ARCHIVE_DIR" "${{ matrix.arch }}"
        
        # Copy documentation
        cp README.md "$ARCHIVE_DIR/"
        cp VERSION "$ARCHIVE_DIR/"
        
        # Show what we're packaging
        echo "Contents to be archived:"
        find "$ARCHIVE_DIR" -type f | head -20
        echo "..."
        
        # Create the tar.gz archive
        tar -czf "$ARCHIVE_NAME" "$ARCHIVE_DIR"
        
        # Create checksum
        sha256sum "$ARCHIVE_NAME" > "${ARCHIVE_NAME}.sha256"
        
        # Clean up
        rm -rf "$ARCHIVE_DIR"
        
        echo "Archive created successfully: $ARCHIVE_NAME"
        ls -la *.tar.gz*
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: agentsmith-hub-${{ matrix.arch }}-${{ steps.version.outputs.release_name }}
        path: |
          agentsmith-hub-${{ matrix.arch }}.tar.gz
          agentsmith-hub-${{ matrix.arch }}.tar.gz.sha256
        retention-days: 30
    
    - name: Create Release (on tag)
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: |
          agentsmith-hub-${{ matrix.arch }}.tar.gz
          agentsmith-hub-${{ matrix.arch }}.tar.gz.sha256
        body: |
          ## AgentSmith-HUB Release ${{ github.ref_name }}
          
          ### What's Included
          
          - Pre-built Linux binary (${{ matrix.arch }})
          - Frontend web application
          - Required libraries (librure.so for ${{ matrix.arch }})
          - Configuration templates
          - Architecture-aware start and stop scripts
          - Deployment documentation
          
          ### Quick Start
          
          1. Download the appropriate archive for your architecture:
             - For AMD64: `agentsmith-hub-amd64.tar.gz`
             - For ARM64: `agentsmith-hub-arm64.tar.gz`
          
          2. Extract and deploy:
             ```bash
             tar -xzf agentsmith-hub-${{ matrix.arch }}.tar.gz
             cd agentsmith-hub-${{ matrix.arch }}
             ```
          
          3. Configure your settings in `config/config.yaml`
          
          4. Run `./start.sh` to start the application
          
          5. Access the web interface at http://localhost:8080
          
          ### Architecture Support
          
          - **AMD64**: Standard x86_64 architecture (Intel/AMD processors)
          - **ARM64**: ARM 64-bit architecture (Apple Silicon, ARM servers)
          
          The scripts automatically detect your system architecture and use the appropriate libraries.
          
          ### Version Information
          
          - Version: ${{ steps.version.outputs.version }}
          - Architecture: ${{ matrix.arch }}
          - Git Commit: ${{ github.sha }}
          - Build Date: $(date -u +'%Y-%m-%d %H:%M:%S UTC')
          
          See README.md in the package for detailed deployment instructions.
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 