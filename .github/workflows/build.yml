name: Build, Release and Publish Docker Image

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  BINARY_NAME: agentsmith-hub
  DOCKER_IMAGE_NAME: ghcr.io/${{ github.repository }}

jobs:
  build-frontend:
    runs-on: ubuntu-latest
    outputs:
      frontend-artifact-name: ${{ steps.upload-artifact.outputs.artifact-name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: web/package-lock.json

      - name: Install frontend dependencies
        working-directory: ./web
        run: npm ci

      - name: Build frontend
        working-directory: ./web
        run: npm run build

      - name: Upload frontend artifact
        id: upload-artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: web/dist/
          retention-days: 1

  build-backend:
    needs: build-frontend
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64, arm64]
    outputs:
      binary-artifact-name: ${{ steps.upload-artifact.outputs.artifact-name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.5'

      - name: Set up cross-compilation tools
        if: matrix.arch == 'arm64'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Build backend
        working-directory: ./src
        run: |
          # Set architecture-specific build variables
          if [ "${{ matrix.arch }}" = "arm64" ]; then
            export CC=aarch64-linux-gnu-gcc
            export CGO_ENABLED=1
            export GOOS=linux
            export GOARCH=arm64
          else
            export CGO_ENABLED=1
            export GOOS=linux
            export GOARCH=amd64
          fi
          
          # Build with version information
          VERSION_RAW=$(cat ../VERSION 2>/dev/null)
          VERSION=$(echo "$VERSION_RAW" | tr -d '\n\r')
          if [ -z "$VERSION" ]; then
            VERSION="unknown"
          fi
          BUILD_TIME=$(date -u '+%Y-%m-%d %H:%M:%S UTC')
          GIT_COMMIT=$(git rev-parse --short HEAD 2>/dev/null || echo "unknown")
          LDFLAGS="-s -w -X 'main.Version=$VERSION' -X 'main.BuildTime=$BUILD_TIME' -X 'main.GitCommit=$GIT_COMMIT'"
          
          # Build the binary
          echo "Building binary for ${{ matrix.arch }}..."
          go build -ldflags="$LDFLAGS" -o "../${{ env.BINARY_NAME }}-${{ matrix.arch }}" .

      - name: Upload backend artifact
        id: upload-artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-${{ matrix.arch }}
          path: ./${{ env.BINARY_NAME }}-${{ matrix.arch }}
          retention-days: 1

  create-release-archive:
    if: startsWith(github.ref, 'refs/tags/')
    needs: [build-frontend, build-backend]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64, arm64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download frontend artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-dist
          path: web/dist

      - name: Download backend artifact
        uses: actions/download-artifact@v4
        with:
          name: backend-${{ matrix.arch }}

      - name: Get version info        id: version        run: |
          VERSION_RAW=$(cat VERSION 2>/dev/null)
          VERSION=$(echo "$VERSION_RAW" | tr -d '\n\r')
          if [ -z "$VERSION" ]; then
            VERSION="unknown"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create deployment archive
        run: |
          ARCHIVE_DIR="agentsmith-hub"
          ARCHIVE_NAME="agentsmith-hub-${{ steps.version.outputs.version }}-${{ matrix.arch }}.tar.gz"
          
          mkdir -p "$ARCHIVE_DIR/web"
          mv "${{ env.BINARY_NAME }}-${{ matrix.arch }}" "$ARCHIVE_DIR/${{ env.BINARY_NAME }}"
          mv web/dist "$ARCHIVE_DIR/web/"
          cp -r config "$ARCHIVE_DIR/"
          cp -r mcp_config "$ARCHIVE_DIR/"
          cp -r lib/linux/${{ matrix.arch }}/* "$ARCHIVE_DIR/lib/"
          cp README.md VERSION "$ARCHIVE_DIR/"
          
          tar -czf "$ARCHIVE_NAME" "$ARCHIVE_DIR"
          sha256sum "$ARCHIVE_NAME" > "${ARCHIVE_NAME}.sha256"

      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-archives
          path: |
            *.tar.gz
            *.sha256
          retention-days: 7

  push-docker-image:
    if: github.event_name == 'push'
    needs: [build-frontend, build-backend]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download frontend artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-dist
          path: web/dist

      - name: Download backend artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: backend-*
          path: .
          merge-multiple: true

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_IMAGE_NAME }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
