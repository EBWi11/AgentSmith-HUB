name: Build and Release

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  BINARY_NAME: agentsmith-hub

jobs:
  build:
    name: Build for ${{ matrix.os }} (${{ matrix.arch }})
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          - os: linux
            arch: amd64
            runner: ubuntu-20.04
            goos: linux
            goarch: amd64
            lib_dir: linux
            lib_file: librure.so
          - os: darwin
            arch: arm64
            runner: macos-14  # M1/M2 runners
            goos: darwin
            goarch: arm64
            lib_dir: darwin
            lib_file: librure.a

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Get version
      id: version
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        else
          VERSION=$(git describe --tags --always --dirty 2>/dev/null || echo "dev-$(git rev-parse --short HEAD)")
        fi
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "BUILD_TIME=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_OUTPUT

    - name: Build binary
      working-directory: src
      run: |
        mkdir -p ../bin
        CGO_ENABLED=1 \
        GOOS=${{ matrix.goos }} \
        GOARCH=${{ matrix.goarch }} \
        CGO_LDFLAGS="-L${{ github.workspace }}/lib/${{ matrix.lib_dir }} -lrure" \
        go build \
          -ldflags="-X main.Version=${{ steps.version.outputs.VERSION }} -X main.BuildTime=${{ steps.version.outputs.BUILD_TIME }}" \
          -o ../bin/${{ env.BINARY_NAME }}-${{ matrix.os }}-${{ matrix.arch }} \
          main.go

    - name: Create run script
      run: |
        cat > bin/run.sh << 'EOF'
        #!/bin/bash
        
        # AgentSmith-HUB Runner Script
        # Auto-generated by GitHub Actions
        
        set -e
        
        # Determine the directory where this script is located
        SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
        
        # Set library path based on OS
        case "$(uname -s)" in
            Linux*)
                export LD_LIBRARY_PATH="$SCRIPT_DIR/lib/linux:${LD_LIBRARY_PATH:-}"
                BINARY_NAME="${{ env.BINARY_NAME }}-linux-amd64"
                ;;
            Darwin*)
                export DYLD_LIBRARY_PATH="$SCRIPT_DIR/lib/darwin:${DYLD_LIBRARY_PATH:-}"
                BINARY_NAME="${{ env.BINARY_NAME }}-darwin-arm64"
                ;;
            *)
                echo "Unsupported operating system: $(uname -s)"
                exit 1
                ;;
        esac
        
        # Check if binary exists
        BINARY_PATH="$SCRIPT_DIR/$BINARY_NAME"
        if [ ! -f "$BINARY_PATH" ]; then
            echo "Binary not found: $BINARY_PATH"
            echo "Available binaries:"
            ls -la "$SCRIPT_DIR"/${{ env.BINARY_NAME }}-* 2>/dev/null || echo "No binaries found"
            exit 1
        fi
        
        # Make sure binary is executable
        chmod +x "$BINARY_PATH"
        
        # Run the binary with all passed arguments
        exec "$BINARY_PATH" "$@"
        EOF
        
        chmod +x bin/run.sh

    - name: Create platform-specific package
      run: |
        mkdir -p release/${{ matrix.os }}-${{ matrix.arch }}
        
        # Copy binary
        cp bin/${{ env.BINARY_NAME }}-${{ matrix.os }}-${{ matrix.arch }} release/${{ matrix.os }}-${{ matrix.arch }}/
        
        # Copy lib directory for this platform
        mkdir -p release/${{ matrix.os }}-${{ matrix.arch }}/lib/${{ matrix.lib_dir }}
        cp lib/${{ matrix.lib_dir }}/${{ matrix.lib_file }} release/${{ matrix.os }}-${{ matrix.arch }}/lib/${{ matrix.lib_dir }}/
        
        # Copy run script
        cp bin/run.sh release/${{ matrix.os }}-${{ matrix.arch }}/
        
        # Copy config directory (if exists)
        if [ -d "config" ]; then
          cp -r config release/${{ matrix.os }}-${{ matrix.arch }}/
        fi
        
        # Create README for this package
        cat > release/${{ matrix.os }}-${{ matrix.arch }}/README.md << EOF
        # AgentSmith-HUB - ${{ matrix.os }}/${{ matrix.arch }}
        
        ## Quick Start
        
        \`\`\`bash
        # Make the runner executable
        chmod +x run.sh
        
        # Run the application
        ./run.sh
        \`\`\`
        
        ## Files
        
        - \`${{ env.BINARY_NAME }}-${{ matrix.os }}-${{ matrix.arch }}\`: Main binary
        - \`run.sh\`: Platform-aware runner script (recommended)
        - \`lib/${{ matrix.lib_dir }}/\`: Required libraries
        - \`config/\`: Configuration templates (if available)
        
        ## Build Information
        
        - Version: ${{ steps.version.outputs.VERSION }}
        - Build Time: ${{ steps.version.outputs.BUILD_TIME }}
        - Platform: ${{ matrix.os }}/${{ matrix.arch }}
        - Go Version: $(go version)
        
        ## Manual Execution
        
        If you prefer to run the binary directly:
        
        \`\`\`bash
        # Linux
        export LD_LIBRARY_PATH="\$PWD/lib/linux:\$LD_LIBRARY_PATH"
        ./${{ env.BINARY_NAME }}-${{ matrix.os }}-${{ matrix.arch }}
        
        # macOS
        export DYLD_LIBRARY_PATH="\$PWD/lib/darwin:\$DYLD_LIBRARY_PATH"
        ./${{ env.BINARY_NAME }}-${{ matrix.os }}-${{ matrix.arch }}
        \`\`\`
        EOF

    - name: Create archive
      run: |
        cd release
        tar -czf ${{ env.BINARY_NAME }}-${{ steps.version.outputs.VERSION }}-${{ matrix.os }}-${{ matrix.arch }}.tar.gz ${{ matrix.os }}-${{ matrix.arch }}

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.BINARY_NAME }}-${{ matrix.os }}-${{ matrix.arch }}
        path: |
          release/${{ matrix.os }}-${{ matrix.arch }}
        retention-days: 30

    - name: Upload release archive
      uses: actions/upload-artifact@v3
      with:
        name: release-archives
        path: release/*.tar.gz
        retention-days: 90

  # Create GitHub Release on tag push
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        name: release-archives
        path: release-archives

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        body: |
          ## AgentSmith-HUB ${{ github.ref_name }}
          
          ### Downloads
          
          Choose the appropriate package for your platform:
          
          - **Linux (Intel/AMD64)**: `agentsmith-hub-*-linux-amd64.tar.gz`
          - **macOS (Apple Silicon/M1/M2)**: `agentsmith-hub-*-darwin-arm64.tar.gz`
          
          ### Installation
          
          1. Download and extract the appropriate archive
          2. Run `chmod +x run.sh` to make the runner executable
          3. Execute `./run.sh` to start the application
          
          ### What's Included
          
          - Compiled binary for your platform
          - Required libraries (librure)
          - Platform-aware runner script
          - Configuration templates
          - Documentation
          
          Built with Go $(go version) at $(date -u +%Y-%m-%dT%H:%M:%SZ)
        draft: false
        prerelease: false

    - name: Upload Linux Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: release-archives/agentsmith-hub-${{ github.ref_name }}-linux-amd64.tar.gz
        asset_name: agentsmith-hub-${{ github.ref_name }}-linux-amd64.tar.gz
        asset_content_type: application/gzip

    - name: Upload macOS Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: release-archives/agentsmith-hub-${{ github.ref_name }}-darwin-arm64.tar.gz
        asset_name: agentsmith-hub-${{ github.ref_name }}-darwin-arm64.tar.gz
        asset_content_type: application/gzip 